.reset-component {
  box-sizing: border-box;
  margin: 0;
  color: #000000d9;
  font-size: 14px;
  font-variant: tabular-nums;
  line-height: 1.5715;
  list-style: none;
  font-feature-settings: "tnum", "tnum";
}

.hover(@color: @input-hover-border-color) {
  border-color: @color;
  border-right-width: @border-width-base;
}

.disabled() {
  color: @input-disabled-color;
  background-color: @input-disabled-bg;
  border-color: @input-border-color;
  box-shadow: none;
  cursor: not-allowed;
  opacity: 1;

  &:hover {
    .hover(@input-border-color);
  }
}

.active(@borderColor: @primary-color; @hoverBorderColor: @primary-color-hover; @outlineColor: @primary-color-outline) {
  & when (@theme =dark) {
    border-color: @borderColor;
  }

  & when (not (@theme =dark) and not (@theme =variable)) {
    border-color: @hoverBorderColor;
  }

  & when not (@theme =variable) {
    box-shadow: @input-outline-offset @outline-blur-size @outline-width fade(@borderColor, @outline-fade);
  }

  & when (@theme =variable) {
    border-color: @hoverBorderColor;
    box-shadow: @input-outline-offset @outline-blur-size @outline-width @outlineColor;
  }

  border-right-width: @border-width-base;
  outline: 0;
}



.placeholder(@color: @input-placeholder-color) {

  // Firefox
  /* stylelint-disable-next-line selector-no-vendor-prefix */
  &::-moz-placeholder {
    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }

  &::placeholder {
    color: @color;
    user-select: none; // https://github.com/ant-design/ant-design/pull/32639
  }

  &:placeholder-shown {
    text-overflow: ellipsis;
  }
}

.disabled() {
  color: @input-disabled-color;
  background-color: @input-disabled-bg;
  border-color: @input-border-color;
  box-shadow: none;
  cursor: not-allowed;
  opacity: 1;

  &:hover {
    .hover(@input-border-color);
  }
}

.input-lg() {
  padding: @input-padding-vertical-lg @input-padding-horizontal-lg;
  font-size: @font-size-lg;
}

.input-sm() {
  padding: @input-padding-vertical-sm @input-padding-horizontal-sm;
}


.input() {
  position: relative;
  display: inline-block;
  width: 100%;
  min-width: 0;
  padding: @input-padding-vertical-base @input-padding-horizontal-base;
  color: @input-color;
  font-size: @font-size-base;
  line-height: @line-height-base;
  background-color: @input-bg;
  background-image: none;
  border: @border-width-base @border-style-base @input-border-color;
  border-radius: @control-border-radius;
  transition: all 0.3s;
  .placeholder(); // Reset placeholder

  &:hover {
    .hover();
  }

  &:focus,
  &-focused {
    .active();
  }

  &-disabled {
    .disabled();
  }

  &[disabled] {
    .disabled();
  }

  &-borderless {

    &,
    &:hover,
    &:focus,
    &-focused,
    &-disabled,
    &[disabled] {
      background-color: transparent;
      border: none;
      box-shadow: none;
    }
  }

  // Reset height for `textarea`s
  textarea& {
    max-width: 100%; // prevent textearea resize from coming out of its container
    height: auto;
    min-height: @input-height-base;
    line-height: @line-height-base;
    vertical-align: bottom;
    transition: all 0.3s, height 0s;
  }

  // Size
  &-lg {
    .input-lg();
  }

  &-sm {
    .input-sm();
  }
}


.roundedArrow(@width, @outer-radius, @bg-color: var(--antd-arrow-background-color)) {
  @corner-height: unit(((@outer-radius) * (1 - 1 / sqrt(2))));

  @width-without-unit: unit(@width);
  @outer-radius-without-unit: unit(@outer-radius);
  @inner-radius-without-unit: unit(@arrow-border-radius);

  @a-x: @width-without-unit - @corner-height;
  @a-y: 2 * @width-without-unit + @corner-height;
  @b-x: @a-x + @outer-radius-without-unit * (1 / sqrt(2));
  @b-y: 2 * @width-without-unit;
  @c-x: 2 * @width-without-unit - @inner-radius-without-unit;
  @c-y: 2 * @width-without-unit;
  @d-x: 2 * @width-without-unit;
  @d-y: 2 * @width-without-unit - @inner-radius-without-unit;
  @e-x: 2 * @width-without-unit;
  @e-y: @f-y + @outer-radius-without-unit * (1 / sqrt(2));
  @f-x: 2 * @width-without-unit + @corner-height;
  @f-y: @width-without-unit - @corner-height;
  @g-x: @f-x - 1;
  @g-y: @f-y;
  @h-x: @a-x;
  @h-y: @a-y - 1;

  border-radius: 0 0 @arrow-border-radius;
  pointer-events: none;

  &::before {
    position: absolute;
    top: -@width;
    left: -@width;
    width: @width * 3;
    height: @width * 3;
    background: @bg-color;
    // Hack firefox: https://github.com/ant-design/ant-design/pull/33710#issuecomment-1015287825
    background-repeat: no-repeat;
    background-position: ceil(-@width + 1px) ceil(-@width + 1px);
    content: '';
    clip-path: path(
      'M @{a-x} @{a-y} A @{outer-radius-without-unit} @{outer-radius-without-unit} 0 0 1 @{b-x} @{b-y} L @{c-x} @{c-y} A @{inner-radius-without-unit} @{inner-radius-without-unit} 0 0 0 @{d-x} @{d-y} L @{e-x} @{e-y} A @{outer-radius-without-unit} @{outer-radius-without-unit} 0 0 1 @{f-x} @{f-y} L @{g-x} @{g-y} L @{h-x} @{h-y} Z'
    );
  }
}

.btn() {
  position: relative;
  display: inline-block;
  font-weight: @btn-font-weight;
  white-space: nowrap;
  text-align: center;
  background-image: none;
  border: @btn-border-width @btn-border-style transparent;
  box-shadow: @btn-shadow;
  cursor: pointer;
  transition: all 0.3s @ease-in-out;
  user-select: none;
  touch-action: manipulation;
  .button-size(
    @btn-height-base; @btn-padding-horizontal-base; @font-size-base; @btn-border-radius-base
  );
  > .@{iconfont-css-prefix} {
    line-height: 1;
  }

  &,
  &:active,
  &:focus {
    outline: 0;
  }

  &:not([disabled]):hover {
    text-decoration: none;
  }

  &:not([disabled]):active {
    outline: 0;
    box-shadow: none;
  }

  &[disabled] {
    cursor: not-allowed;

    > * {
      pointer-events: none;
    }
  }

  &-lg {
    .button-size(
      @btn-height-lg; @btn-padding-horizontal-lg; @btn-font-size-lg; @btn-border-radius-base
    );
  }

  &-sm {
    .button-size(
      @btn-height-sm; @btn-padding-horizontal-sm; @btn-font-size-sm; @btn-border-radius-sm
    );
  }
}
// primary button style
.btn-primary() {
  .button-variant-primary(@btn-primary-color; @btn-primary-bg; @primary-color-hover; @primary-color-active);
}

.button-size(@height; @padding-horizontal; @font-size; @border-radius) {
  @padding-vertical: max(
    (round(((@height - @font-size * @line-height-base) / 2) * 10) / 10) - @border-width-base,
    0
  );
  height: @height;
  padding: @padding-vertical @padding-horizontal;
  font-size: @font-size;
  border-radius: @border-radius;
}

.button-color(@color; @background; @border) {
  color: @color;
  border-color: @border; // a inside Button which only work in Chrome
  & when not(@background = null) {
    background: @background;
  }
  // http://stackoverflow.com/a/17253457
  > a:only-child {
    color: currentcolor;

    &::after {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background: transparent;
      content: '';
    }
  }
}

.button-disabled(@color: @btn-disable-color; @background: @btn-disable-bg; @border: @btn-disable-border) {
  &[disabled] {
    &,
    &:hover,
    &:focus,
    &:active {
      .button-color(@color; @background; @border);

      text-shadow: none;
      box-shadow: none;
    }
  }
}

.button-variant-primary(@color; @background; @backgroundHover: yellow; @backgroundActive: yellow) {
  .button-color(@color; @background; @background);

  text-shadow: @btn-text-shadow;
  box-shadow: @btn-primary-shadow;

  &:hover,
  &:focus {
    & when (@theme = dark) {
      .button-color(
        @color; ~`colorPalette('@{background}', 7) `; ~`colorPalette('@{background}', 7) `
      );
    }
    & when (not (@theme = dark) and not (@theme = variable)) {
      .button-color(
        @color; ~`colorPalette('@{background}', 5) `; ~`colorPalette('@{background}', 5) `
      );
    }
    & when (@theme = variable) {
      .button-color(@color; @backgroundHover; @backgroundHover);
    }
  }

  &:active {
    & when (@theme = dark) {
      .button-color(
        @color; ~`colorPalette('@{background}', 5) `; ~`colorPalette('@{background}', 5) `
      );
    }
    & when (not (@theme = dark) and not (@theme = variable)) {
      .button-color(
        @color; ~`colorPalette('@{background}', 7) `; ~`colorPalette('@{background}', 7) `
      );
    }
    & when (@theme = variable) {
      .button-color(@color; @backgroundActive; @backgroundActive);
    }
  }

  .button-disabled();
}

// // default button style
// .btn-default() {
//   .button-variant-other(@btn-default-color; @btn-default-bg; @btn-default-border; );

//   &:hover,
//   &:focus,
//   &:active {
//     text-decoration: none;
//     background: @btn-default-bg;
//   }
// }
// // ghost button style
// .btn-ghost() {
//   .button-variant-other(@btn-ghost-color, @btn-ghost-bg, @btn-ghost-border);
// }
// // dashed button style
// .btn-dashed() {
//   .button-variant-other(@btn-default-color, @btn-default-bg, @btn-default-border);
//   border-style: dashed;
// }
// // danger button style
// .btn-danger() {
//   .button-variant-primary(@btn-danger-color, @btn-danger-bg, @error-color-hover, @error-color-active);
// }